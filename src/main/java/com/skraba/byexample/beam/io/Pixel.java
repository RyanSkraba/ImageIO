/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.skraba.byexample.beam.io;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Pixel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6354562767119382045L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Pixel\",\"namespace\":\"com.skraba.byexample.beam.io\",\"fields\":[{\"name\":\"width\",\"type\":\"int\"},{\"name\":\"height\",\"type\":\"int\"},{\"name\":\"x\",\"type\":\"int\"},{\"name\":\"y\",\"type\":\"int\"},{\"name\":\"red\",\"type\":\"int\"},{\"name\":\"green\",\"type\":\"int\"},{\"name\":\"blue\",\"type\":\"int\"},{\"name\":\"alpha\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Pixel> ENCODER =
      new BinaryMessageEncoder<Pixel>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Pixel> DECODER =
      new BinaryMessageDecoder<Pixel>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Pixel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Pixel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Pixel>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Pixel to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Pixel from a ByteBuffer. */
  public static Pixel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int width;
  @Deprecated public int height;
  @Deprecated public int x;
  @Deprecated public int y;
  @Deprecated public int red;
  @Deprecated public int green;
  @Deprecated public int blue;
  @Deprecated public int alpha;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Pixel() {}

  /**
   * All-args constructor.
   * @param width The new value for width
   * @param height The new value for height
   * @param x The new value for x
   * @param y The new value for y
   * @param red The new value for red
   * @param green The new value for green
   * @param blue The new value for blue
   * @param alpha The new value for alpha
   */
  public Pixel(java.lang.Integer width, java.lang.Integer height, java.lang.Integer x, java.lang.Integer y, java.lang.Integer red, java.lang.Integer green, java.lang.Integer blue, java.lang.Integer alpha) {
    this.width = width;
    this.height = height;
    this.x = x;
    this.y = y;
    this.red = red;
    this.green = green;
    this.blue = blue;
    this.alpha = alpha;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return width;
    case 1: return height;
    case 2: return x;
    case 3: return y;
    case 4: return red;
    case 5: return green;
    case 6: return blue;
    case 7: return alpha;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: width = (java.lang.Integer)value$; break;
    case 1: height = (java.lang.Integer)value$; break;
    case 2: x = (java.lang.Integer)value$; break;
    case 3: y = (java.lang.Integer)value$; break;
    case 4: red = (java.lang.Integer)value$; break;
    case 5: green = (java.lang.Integer)value$; break;
    case 6: blue = (java.lang.Integer)value$; break;
    case 7: alpha = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'width' field.
   * @return The value of the 'width' field.
   */
  public java.lang.Integer getWidth() {
    return width;
  }

  /**
   * Sets the value of the 'width' field.
   * @param value the value to set.
   */
  public void setWidth(java.lang.Integer value) {
    this.width = value;
  }

  /**
   * Gets the value of the 'height' field.
   * @return The value of the 'height' field.
   */
  public java.lang.Integer getHeight() {
    return height;
  }

  /**
   * Sets the value of the 'height' field.
   * @param value the value to set.
   */
  public void setHeight(java.lang.Integer value) {
    this.height = value;
  }

  /**
   * Gets the value of the 'x' field.
   * @return The value of the 'x' field.
   */
  public java.lang.Integer getX() {
    return x;
  }

  /**
   * Sets the value of the 'x' field.
   * @param value the value to set.
   */
  public void setX(java.lang.Integer value) {
    this.x = value;
  }

  /**
   * Gets the value of the 'y' field.
   * @return The value of the 'y' field.
   */
  public java.lang.Integer getY() {
    return y;
  }

  /**
   * Sets the value of the 'y' field.
   * @param value the value to set.
   */
  public void setY(java.lang.Integer value) {
    this.y = value;
  }

  /**
   * Gets the value of the 'red' field.
   * @return The value of the 'red' field.
   */
  public java.lang.Integer getRed() {
    return red;
  }

  /**
   * Sets the value of the 'red' field.
   * @param value the value to set.
   */
  public void setRed(java.lang.Integer value) {
    this.red = value;
  }

  /**
   * Gets the value of the 'green' field.
   * @return The value of the 'green' field.
   */
  public java.lang.Integer getGreen() {
    return green;
  }

  /**
   * Sets the value of the 'green' field.
   * @param value the value to set.
   */
  public void setGreen(java.lang.Integer value) {
    this.green = value;
  }

  /**
   * Gets the value of the 'blue' field.
   * @return The value of the 'blue' field.
   */
  public java.lang.Integer getBlue() {
    return blue;
  }

  /**
   * Sets the value of the 'blue' field.
   * @param value the value to set.
   */
  public void setBlue(java.lang.Integer value) {
    this.blue = value;
  }

  /**
   * Gets the value of the 'alpha' field.
   * @return The value of the 'alpha' field.
   */
  public java.lang.Integer getAlpha() {
    return alpha;
  }

  /**
   * Sets the value of the 'alpha' field.
   * @param value the value to set.
   */
  public void setAlpha(java.lang.Integer value) {
    this.alpha = value;
  }

  /**
   * Creates a new Pixel RecordBuilder.
   * @return A new Pixel RecordBuilder
   */
  public static com.skraba.byexample.beam.io.Pixel.Builder newBuilder() {
    return new com.skraba.byexample.beam.io.Pixel.Builder();
  }

  /**
   * Creates a new Pixel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Pixel RecordBuilder
   */
  public static com.skraba.byexample.beam.io.Pixel.Builder newBuilder(com.skraba.byexample.beam.io.Pixel.Builder other) {
    return new com.skraba.byexample.beam.io.Pixel.Builder(other);
  }

  /**
   * Creates a new Pixel RecordBuilder by copying an existing Pixel instance.
   * @param other The existing instance to copy.
   * @return A new Pixel RecordBuilder
   */
  public static com.skraba.byexample.beam.io.Pixel.Builder newBuilder(com.skraba.byexample.beam.io.Pixel other) {
    return new com.skraba.byexample.beam.io.Pixel.Builder(other);
  }

  /**
   * RecordBuilder for Pixel instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Pixel>
    implements org.apache.avro.data.RecordBuilder<Pixel> {

    private int width;
    private int height;
    private int x;
    private int y;
    private int red;
    private int green;
    private int blue;
    private int alpha;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.skraba.byexample.beam.io.Pixel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.width)) {
        this.width = data().deepCopy(fields()[0].schema(), other.width);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.height)) {
        this.height = data().deepCopy(fields()[1].schema(), other.height);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.x)) {
        this.x = data().deepCopy(fields()[2].schema(), other.x);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.y)) {
        this.y = data().deepCopy(fields()[3].schema(), other.y);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.red)) {
        this.red = data().deepCopy(fields()[4].schema(), other.red);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.green)) {
        this.green = data().deepCopy(fields()[5].schema(), other.green);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.blue)) {
        this.blue = data().deepCopy(fields()[6].schema(), other.blue);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.alpha)) {
        this.alpha = data().deepCopy(fields()[7].schema(), other.alpha);
        fieldSetFlags()[7] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Pixel instance
     * @param other The existing instance to copy.
     */
    private Builder(com.skraba.byexample.beam.io.Pixel other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.width)) {
        this.width = data().deepCopy(fields()[0].schema(), other.width);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.height)) {
        this.height = data().deepCopy(fields()[1].schema(), other.height);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.x)) {
        this.x = data().deepCopy(fields()[2].schema(), other.x);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.y)) {
        this.y = data().deepCopy(fields()[3].schema(), other.y);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.red)) {
        this.red = data().deepCopy(fields()[4].schema(), other.red);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.green)) {
        this.green = data().deepCopy(fields()[5].schema(), other.green);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.blue)) {
        this.blue = data().deepCopy(fields()[6].schema(), other.blue);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.alpha)) {
        this.alpha = data().deepCopy(fields()[7].schema(), other.alpha);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'width' field.
      * @return The value.
      */
    public java.lang.Integer getWidth() {
      return width;
    }

    /**
      * Sets the value of the 'width' field.
      * @param value The value of 'width'.
      * @return This builder.
      */
    public com.skraba.byexample.beam.io.Pixel.Builder setWidth(int value) {
      validate(fields()[0], value);
      this.width = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'width' field has been set.
      * @return True if the 'width' field has been set, false otherwise.
      */
    public boolean hasWidth() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'width' field.
      * @return This builder.
      */
    public com.skraba.byexample.beam.io.Pixel.Builder clearWidth() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'height' field.
      * @return The value.
      */
    public java.lang.Integer getHeight() {
      return height;
    }

    /**
      * Sets the value of the 'height' field.
      * @param value The value of 'height'.
      * @return This builder.
      */
    public com.skraba.byexample.beam.io.Pixel.Builder setHeight(int value) {
      validate(fields()[1], value);
      this.height = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'height' field has been set.
      * @return True if the 'height' field has been set, false otherwise.
      */
    public boolean hasHeight() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'height' field.
      * @return This builder.
      */
    public com.skraba.byexample.beam.io.Pixel.Builder clearHeight() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'x' field.
      * @return The value.
      */
    public java.lang.Integer getX() {
      return x;
    }

    /**
      * Sets the value of the 'x' field.
      * @param value The value of 'x'.
      * @return This builder.
      */
    public com.skraba.byexample.beam.io.Pixel.Builder setX(int value) {
      validate(fields()[2], value);
      this.x = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'x' field has been set.
      * @return True if the 'x' field has been set, false otherwise.
      */
    public boolean hasX() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'x' field.
      * @return This builder.
      */
    public com.skraba.byexample.beam.io.Pixel.Builder clearX() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'y' field.
      * @return The value.
      */
    public java.lang.Integer getY() {
      return y;
    }

    /**
      * Sets the value of the 'y' field.
      * @param value The value of 'y'.
      * @return This builder.
      */
    public com.skraba.byexample.beam.io.Pixel.Builder setY(int value) {
      validate(fields()[3], value);
      this.y = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'y' field has been set.
      * @return True if the 'y' field has been set, false otherwise.
      */
    public boolean hasY() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'y' field.
      * @return This builder.
      */
    public com.skraba.byexample.beam.io.Pixel.Builder clearY() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'red' field.
      * @return The value.
      */
    public java.lang.Integer getRed() {
      return red;
    }

    /**
      * Sets the value of the 'red' field.
      * @param value The value of 'red'.
      * @return This builder.
      */
    public com.skraba.byexample.beam.io.Pixel.Builder setRed(int value) {
      validate(fields()[4], value);
      this.red = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'red' field has been set.
      * @return True if the 'red' field has been set, false otherwise.
      */
    public boolean hasRed() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'red' field.
      * @return This builder.
      */
    public com.skraba.byexample.beam.io.Pixel.Builder clearRed() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'green' field.
      * @return The value.
      */
    public java.lang.Integer getGreen() {
      return green;
    }

    /**
      * Sets the value of the 'green' field.
      * @param value The value of 'green'.
      * @return This builder.
      */
    public com.skraba.byexample.beam.io.Pixel.Builder setGreen(int value) {
      validate(fields()[5], value);
      this.green = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'green' field has been set.
      * @return True if the 'green' field has been set, false otherwise.
      */
    public boolean hasGreen() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'green' field.
      * @return This builder.
      */
    public com.skraba.byexample.beam.io.Pixel.Builder clearGreen() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'blue' field.
      * @return The value.
      */
    public java.lang.Integer getBlue() {
      return blue;
    }

    /**
      * Sets the value of the 'blue' field.
      * @param value The value of 'blue'.
      * @return This builder.
      */
    public com.skraba.byexample.beam.io.Pixel.Builder setBlue(int value) {
      validate(fields()[6], value);
      this.blue = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'blue' field has been set.
      * @return True if the 'blue' field has been set, false otherwise.
      */
    public boolean hasBlue() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'blue' field.
      * @return This builder.
      */
    public com.skraba.byexample.beam.io.Pixel.Builder clearBlue() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'alpha' field.
      * @return The value.
      */
    public java.lang.Integer getAlpha() {
      return alpha;
    }

    /**
      * Sets the value of the 'alpha' field.
      * @param value The value of 'alpha'.
      * @return This builder.
      */
    public com.skraba.byexample.beam.io.Pixel.Builder setAlpha(int value) {
      validate(fields()[7], value);
      this.alpha = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'alpha' field has been set.
      * @return True if the 'alpha' field has been set, false otherwise.
      */
    public boolean hasAlpha() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'alpha' field.
      * @return This builder.
      */
    public com.skraba.byexample.beam.io.Pixel.Builder clearAlpha() {
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Pixel build() {
      try {
        Pixel record = new Pixel();
        record.width = fieldSetFlags()[0] ? this.width : (java.lang.Integer) defaultValue(fields()[0]);
        record.height = fieldSetFlags()[1] ? this.height : (java.lang.Integer) defaultValue(fields()[1]);
        record.x = fieldSetFlags()[2] ? this.x : (java.lang.Integer) defaultValue(fields()[2]);
        record.y = fieldSetFlags()[3] ? this.y : (java.lang.Integer) defaultValue(fields()[3]);
        record.red = fieldSetFlags()[4] ? this.red : (java.lang.Integer) defaultValue(fields()[4]);
        record.green = fieldSetFlags()[5] ? this.green : (java.lang.Integer) defaultValue(fields()[5]);
        record.blue = fieldSetFlags()[6] ? this.blue : (java.lang.Integer) defaultValue(fields()[6]);
        record.alpha = fieldSetFlags()[7] ? this.alpha : (java.lang.Integer) defaultValue(fields()[7]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Pixel>
    WRITER$ = (org.apache.avro.io.DatumWriter<Pixel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Pixel>
    READER$ = (org.apache.avro.io.DatumReader<Pixel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
